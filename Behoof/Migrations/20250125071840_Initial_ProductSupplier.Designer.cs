// <auto-generated />
using System;
using Behoof.Domain.Entity.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Behoof.Migrations
{
    [DbContext(typeof(ApplicationContext))]
    [Migration("20250125071840_Initial_ProductSupplier")]
    partial class Initial_ProductSupplier
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.12")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Behoof.Domain.Entity.Camera", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Camera");
                });

            modelBuilder.Entity("Behoof.Domain.Entity.Category", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ImageLink")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Category");
                });

            modelBuilder.Entity("Behoof.Domain.Entity.City", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CountryId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CountryId");

                    b.ToTable("City");
                });

            modelBuilder.Entity("Behoof.Domain.Entity.Color", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Color");
                });

            modelBuilder.Entity("Behoof.Domain.Entity.Country", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Country");
                });

            modelBuilder.Entity("Behoof.Domain.Entity.Diagonal", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Diagonal");
                });

            modelBuilder.Entity("Behoof.Domain.Entity.Favorite", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.ToTable("Favorite");
                });

            modelBuilder.Entity("Behoof.Domain.Entity.FavoriteItem", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("FavoriteId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProductId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("FavoriteId");

                    b.HasIndex("ProductId");

                    b.ToTable("FavoriteItem");
                });

            modelBuilder.Entity("Behoof.Domain.Entity.Memory", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Memory");
                });

            modelBuilder.Entity("Behoof.Domain.Entity.Network", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Network");
                });

            modelBuilder.Entity("Behoof.Domain.Entity.Power", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Power");
                });

            modelBuilder.Entity("Behoof.Domain.Entity.Product", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int?>("BallAnswer")
                        .HasColumnType("int");

                    b.Property<int?>("BallBatery")
                        .HasColumnType("int");

                    b.Property<int?>("BallCamera")
                        .HasColumnType("int");

                    b.Property<int?>("BallDesign")
                        .HasColumnType("int");

                    b.Property<int?>("BallPortatable")
                        .HasColumnType("int");

                    b.Property<string>("CameraId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CategoryId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ColorId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("DateCreate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DiagonalId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ImageLink")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MemoryId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NetworkId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("PowerId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<decimal?>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("SupplierItemId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("SystemId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("YearOfRealiseId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("CameraId");

                    b.HasIndex("CategoryId");

                    b.HasIndex("ColorId");

                    b.HasIndex("DiagonalId");

                    b.HasIndex("MemoryId");

                    b.HasIndex("NetworkId");

                    b.HasIndex("PowerId");

                    b.HasIndex("SupplierItemId");

                    b.HasIndex("SystemId");

                    b.HasIndex("YearOfRealiseId");

                    b.ToTable("Product");
                });

            modelBuilder.Entity("Behoof.Domain.Entity.Supplier", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Supplier");
                });

            modelBuilder.Entity("Behoof.Domain.Entity.SupplierItem", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("DateOfCreate")
                        .HasColumnType("datetime2");

                    b.Property<string>("SupplierId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("SupplierId");

                    b.ToTable("SupplierItem");
                });

            modelBuilder.Entity("Behoof.Domain.Entity.SupplierProduct", b =>
                {
                    b.Property<string>("SupplierId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProductId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("SupplierId", "ProductId");

                    b.HasIndex("ProductId");

                    b.ToTable("SupplierProduct");
                });

            modelBuilder.Entity("Behoof.Domain.Entity.System", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("System");
                });

            modelBuilder.Entity("Behoof.Domain.Entity.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CityId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CountryId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FavoriteId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Login")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Passoword")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CityId");

                    b.HasIndex("CountryId");

                    b.HasIndex("FavoriteId")
                        .IsUnique()
                        .HasFilter("[FavoriteId] IS NOT NULL");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("Behoof.Domain.Entity.YearOfRealise", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("DateTime")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("YearOfRealise");
                });

            modelBuilder.Entity("Behoof.Domain.Entity.City", b =>
                {
                    b.HasOne("Behoof.Domain.Entity.Country", "Country")
                        .WithMany("City")
                        .HasForeignKey("CountryId");

                    b.Navigation("Country");
                });

            modelBuilder.Entity("Behoof.Domain.Entity.FavoriteItem", b =>
                {
                    b.HasOne("Behoof.Domain.Entity.Favorite", null)
                        .WithMany("FavoriteItem")
                        .HasForeignKey("FavoriteId");

                    b.HasOne("Behoof.Domain.Entity.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Behoof.Domain.Entity.Product", b =>
                {
                    b.HasOne("Behoof.Domain.Entity.Camera", "Camera")
                        .WithMany("Product")
                        .HasForeignKey("CameraId");

                    b.HasOne("Behoof.Domain.Entity.Category", "Category")
                        .WithMany()
                        .HasForeignKey("CategoryId");

                    b.HasOne("Behoof.Domain.Entity.Color", "Color")
                        .WithMany("Product")
                        .HasForeignKey("ColorId");

                    b.HasOne("Behoof.Domain.Entity.Diagonal", "Diagonal")
                        .WithMany("Product")
                        .HasForeignKey("DiagonalId");

                    b.HasOne("Behoof.Domain.Entity.Memory", "Memory")
                        .WithMany("Product")
                        .HasForeignKey("MemoryId");

                    b.HasOne("Behoof.Domain.Entity.Network", "Network")
                        .WithMany("Product")
                        .HasForeignKey("NetworkId");

                    b.HasOne("Behoof.Domain.Entity.Power", "Power")
                        .WithMany("Product")
                        .HasForeignKey("PowerId");

                    b.HasOne("Behoof.Domain.Entity.SupplierItem", null)
                        .WithMany("Products")
                        .HasForeignKey("SupplierItemId");

                    b.HasOne("Behoof.Domain.Entity.System", "System")
                        .WithMany("Product")
                        .HasForeignKey("SystemId");

                    b.HasOne("Behoof.Domain.Entity.YearOfRealise", "YearOfRealise")
                        .WithMany("Product")
                        .HasForeignKey("YearOfRealiseId");

                    b.Navigation("Camera");

                    b.Navigation("Category");

                    b.Navigation("Color");

                    b.Navigation("Diagonal");

                    b.Navigation("Memory");

                    b.Navigation("Network");

                    b.Navigation("Power");

                    b.Navigation("System");

                    b.Navigation("YearOfRealise");
                });

            modelBuilder.Entity("Behoof.Domain.Entity.SupplierItem", b =>
                {
                    b.HasOne("Behoof.Domain.Entity.Supplier", "Supplier")
                        .WithMany("SupplierItem")
                        .HasForeignKey("SupplierId");

                    b.Navigation("Supplier");
                });

            modelBuilder.Entity("Behoof.Domain.Entity.SupplierProduct", b =>
                {
                    b.HasOne("Behoof.Domain.Entity.Product", "Product")
                        .WithMany("SupplierProducts")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Behoof.Domain.Entity.Supplier", "Supplier")
                        .WithMany("SupplierProducts")
                        .HasForeignKey("SupplierId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");

                    b.Navigation("Supplier");
                });

            modelBuilder.Entity("Behoof.Domain.Entity.User", b =>
                {
                    b.HasOne("Behoof.Domain.Entity.City", "City")
                        .WithMany()
                        .HasForeignKey("CityId");

                    b.HasOne("Behoof.Domain.Entity.Country", "Country")
                        .WithMany("User")
                        .HasForeignKey("CountryId");

                    b.HasOne("Behoof.Domain.Entity.Favorite", "Favorite")
                        .WithOne("User")
                        .HasForeignKey("Behoof.Domain.Entity.User", "FavoriteId");

                    b.Navigation("City");

                    b.Navigation("Country");

                    b.Navigation("Favorite");
                });

            modelBuilder.Entity("Behoof.Domain.Entity.Camera", b =>
                {
                    b.Navigation("Product");
                });

            modelBuilder.Entity("Behoof.Domain.Entity.Color", b =>
                {
                    b.Navigation("Product");
                });

            modelBuilder.Entity("Behoof.Domain.Entity.Country", b =>
                {
                    b.Navigation("City");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Behoof.Domain.Entity.Diagonal", b =>
                {
                    b.Navigation("Product");
                });

            modelBuilder.Entity("Behoof.Domain.Entity.Favorite", b =>
                {
                    b.Navigation("FavoriteItem");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Behoof.Domain.Entity.Memory", b =>
                {
                    b.Navigation("Product");
                });

            modelBuilder.Entity("Behoof.Domain.Entity.Network", b =>
                {
                    b.Navigation("Product");
                });

            modelBuilder.Entity("Behoof.Domain.Entity.Power", b =>
                {
                    b.Navigation("Product");
                });

            modelBuilder.Entity("Behoof.Domain.Entity.Product", b =>
                {
                    b.Navigation("SupplierProducts");
                });

            modelBuilder.Entity("Behoof.Domain.Entity.Supplier", b =>
                {
                    b.Navigation("SupplierItem");

                    b.Navigation("SupplierProducts");
                });

            modelBuilder.Entity("Behoof.Domain.Entity.SupplierItem", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("Behoof.Domain.Entity.System", b =>
                {
                    b.Navigation("Product");
                });

            modelBuilder.Entity("Behoof.Domain.Entity.YearOfRealise", b =>
                {
                    b.Navigation("Product");
                });
#pragma warning restore 612, 618
        }
    }
}
